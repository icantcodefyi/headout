// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DB_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    profile       UserProfile?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Globetrotter Game Models
model Destination {
    id        String        @id @default(cuid())
    city      String
    country   String
    clues     String[]
    funFacts  String[]
    trivia    String[]
    cdnImageUrl  String?
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
    games     GameSession[]
}

model UserProfile {
    id                 String        @id @default(cuid())
    userId             String        @unique
    username           String        @unique
    correctCount       Int           @default(0)
    wrongCount         Int           @default(0)
    totalScore         Int           @default(0)
    createdAt          DateTime      @default(now())
    updatedAt          DateTime      @updatedAt
    user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    games              GameSession[]
    sentChallenges     Challenge[]   @relation("Challenger")
    receivedChallenges Challenge[]   @relation("Challenged")
}

model GameSession {
    id            String      @id @default(cuid())
    userProfileId String
    destinationId String
    isCorrect     Boolean
    createdAt     DateTime    @default(now())
    userProfile   UserProfile @relation(fields: [userProfileId], references: [id])
    destination   Destination @relation(fields: [destinationId], references: [id])
}

model Challenge {
    id           String       @id @default(cuid())
    challengerId String
    challengedId String?
    status       String       @default("PENDING") // PENDING, ACCEPTED, COMPLETED
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
    challenger   UserProfile  @relation("Challenger", fields: [challengerId], references: [id])
    challenged   UserProfile? @relation("Challenged", fields: [challengedId], references: [id])
}
